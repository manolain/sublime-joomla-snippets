<snippet>
	<content><![CDATA[/**
 * ${TM_PROJECT/(.+)/\u\1/g} Quickicon plugin
 *
 * @package     $TM_PROJECT
 * @subpackage  plg_quickicon_${1/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class plgQuickicon${TM_PROJECT/(.+)/\u\1/g} extends JPlugin
{
	/**
	 * Constructor
	 *
	 * @param   object  &\$subject  The object to observe
	 * @param   array   \$config    An array that holds the plugin configuration
	 *
	 * @since   $TM_VERSION
	 */
	public function __construct(&\$subject, \$config)
	{
		parent::__construct(\$subject, \$config);
		\$this->loadLanguage();
	}

	/**
	 * This method is called when the Quick Icons module is constructing its set
	 * of icons. You can return an array which defines a single icon and it will
	 * be rendered right after the stock Quick Icons.
	 *
	 * @param   string  \$context  The calling context
	 *
	 * @return  array   A list of icon definition associative arrays, consisting of the
	 *				    keys link, image, text and access.
	 *
	 * @since   $TM_VERSION
	 */
	public function onGetIcons(\$context)
	{
		if (\$context != \$this->params->get('context', 'mod_quickicon') || !JFactory::getUser()->authorise('core.manage', 'com_installer'))
		{
			return;
		}

		return array(array(
			'link' => 'index.php?option=com_${TM_PROJECT/(.+)/\L\1/g}',
			'image' => JURI::root() . 'media/com_${TM_PROJECT/(.+)/\L\1/g}/images/icon/${1/(.+)/\L\1/g}.png',
			'text' => JText::_('PLG_QUICKICON_${1/(.+)/\U\1/g}_${1/(.+)/\U\1/g}'),
			'id' => 'plg_quickicon_com_${TM_PROJECT/(.+)/\L\1/g}'
		));
	}
}

]]></content>
	<tabTrigger>jpluginquickicon</tabTrigger>
</snippet>
