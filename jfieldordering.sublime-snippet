<snippet>
	<content><![CDATA[/**
 * Supports an HTML select list of products
 *
 * @package     $TM_PROJECT
 * @subpackage  com_${TM_PROJECT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class JFormFieldOrdering extends JFormField
{
	/**
	 * The form field type.
	 *
	 * @var		string
	 * @since	$TM_VERSION
	 */
	protected \$type = 'Ordering';

	/**
	 * Method to get the field input markup.
	 *
	 * @return	string	The field input markup.
	 *
	 * @since	$TM_VERSION
	 */
	protected function getInput()
	{
		// Initialize variables.
		\$html = array();
		\$attr = '';

		// Initialize some field attributes.
		\$attr .= \$this->element['class'] ? ' class="' . (string) \$this->element['class'] . '"' : '';
		\$attr .= ((string) \$this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';
		\$attr .= \$this->element['size'] ? ' size="' . (int) \$this->element['size'] . '"' : '';

		// Initialize JavaScript field attributes.
		\$attr .= \$this->element['onchange'] ? ' onchange="' . (string) \$this->element['onchange'] . '"' : '';

		// Get some field values from the form.
		\$productId  = (int) \$this->form->getValue('id');
		\$categoryId = (int) \$this->form->getValue('catid');

		// Build the query for the ordering list.
		\$query = 'SELECT ordering AS value, name AS text'
			. ' FROM #__${TM_PROJECT/(.+)/\L\1/g}'
			. ' WHERE catid = '
			. (int) \$categoryId
			. ' ORDER BY ordering';

		// Create a read-only list (no name) with a hidden input to store the value.
		if ((string) \$this->element['readonly'] == 'true')
		{
			\$html[] = JHtml::_('list.ordering', '', \$query, trim(\$attr), \$this->value, \$productId ? 0 : 1);
			\$html[] = '<input type="hidden" name="' . \$this->name . '" value="' . \$this->value . '"/>';
		}
		// Create a regular list.
		else
		{
			\$html[] = JHtml::_('list.ordering', \$this->name, \$query, trim(\$attr), \$this->value, \$productId ? 0 : 1);
		}

		return implode(\$html);
	}
}

]]></content>
	<tabTrigger>jfieldordering</tabTrigger>
</snippet>
