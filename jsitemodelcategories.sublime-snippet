<snippet>
	<content><![CDATA[/**
 * This models supports retrieving lists of ${TM_PROJECT/(.+)(s\b)/\L\1/g} ${2/(.+)/\L\1/g}.
 *
 * @package     $TM_PROJECT
 * @subpackage  com_${TM_PROJECT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class ${TM_PROJECT/(.+)/\u\1/g}Model${2:Categories} extends JModelLegacy
{
	/**
	 * Model context string.
	 *
	 * @var     string
	 */
	public \$_context = 'com_${TM_PROJECT/(.+)/\L\1/g}.${2/(.+)/\L\1/g}';

	/**
	 * The category context (allows other extensions to derived from this model).
	 *
	 * @var     string
	 */
	protected \$_extension = 'com_${TM_PROJECT/(.+)/\L\1/g}';

	private \$_parent = null;

	private \$_items = null;

	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @return  void
	 *
	 * @since	$TM_VERSION
	 */
	protected function populateState()
	{
		\$app = JFactory::getApplication();
		\$this->setState('filter.extension', \$this->_extension);

		// Get the parent id if defined.
		\$parentId = JRequest::getInt('id');
		\$this->setState('filter.parentId', \$parentId);

		\$params = \$app->getParams();
		\$this->setState('params', \$params);

		\$this->setState('filter.published',	1);
		\$this->setState('filter.access', true);
	}

	/**
	 * Method to get a store id based on model configuration state.
	 *
	 * This is necessary because the model is used by the component and
	 * different modules that might need different sets of data or different
	 * ordering requirements.
	 *
	 * @param   string  \$id  A prefix for the store id.
	 *
	 * @return  string  A store id.
	 *
	 * @since   $TM_VERSION
	 */
	protected function getStoreId(\$id = '')
	{
		// Compile the store id.
		\$id	.= ':' . \$this->getState('filter.extension');
		\$id	.= ':' . \$this->getState('filter.published');
		\$id	.= ':' . \$this->getState('filter.access');
		\$id	.= ':' . \$this->getState('filter.parentId');

		return parent::getStoreId(\$id);
	}

	/**
	 * Redefine the function an add some properties to make the styling more easy
	 *
	 * @return  mixed  An array of data items on success, false on failure.
	 *
	 * @since   $TM_VERSION
	 */
	public function getItems()
	{
		if (!count(\$this->_items))
		{
			\$app = JFactory::getApplication();
			\$menu = \$app->getMenu();
			\$active = \$menu->getActive();
			\$params = new JRegistry;

			if (\$active)
			{
				\$params->loadString(\$active->params);
			}

			\$options = array();
			\$options['countItems'] = \$params->get('show_cat_items_cat', 1) || !\$params->get('show_empty_categories_cat', 0);
			\$categories = JCategories::getInstance('${TM_PROJECT/(.+)/\u\1/g}', \$options);
			\$this->_parent = \$categories->get(\$this->getState('filter.parentId', 'root'));

			if (is_object(\$this->_parent))
			{
				\$this->_items = \$this->_parent->getChildren();
			}
			else
			{
				\$this->_items = false;
			}
		}

		return \$this->_items;
	}

	/**
	 * Get the parent item.
	 *
	 * @return  mixed  An array of items or false if an error occurs.
	 *
	 * @since   $TM_VERSION
	 */
	public function getParent()
	{
		if (!is_object(\$this->_parent))
		{
			\$this->getItems();
		}

		return \$this->_parent;
	}
}

]]></content>
	<tabTrigger>jsitemodelcategories</tabTrigger>
</snippet>
